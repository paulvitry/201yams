#! /usr/bin/python3

import sys
import fileinput
import math

def print_usage():
    print("USAGE\n\t   ./201yams d1 d2 d3 d4 d5 c\n")
    print("DESCRIPTION\n\t   d1    value of the first die (0 if not throw)")
    print("\t   d2    value of the second die (0 if not throw)")
    print("\t   d3    value of the third die (0 if not throw)")
    print("\t   d4    value of the fourth die (0 if not throw)")
    print("\t   d5    value of the fifth die (0 if not throw)")
    print("\t   c     expected combination")

def binomial(x, y):
    if y == x:
        return 1
    elif y == 1:
        return x
    elif y > x:
        return 0
    else:
        a = math.factorial(x)
        b = math.factorial(y)
        c = math.factorial(x-y)
        div = a // (b * c)
        return div

def exactly(nbDice, val):
    return (5 ** (nbDice - val)) * binomial(nbDice, val)

def probability(nbDice, nbOcc):
    val = nbDice
    proba = 0

    while (val >= nbOcc):
        proba += exactly(nbDice, val)
        val -= 1     
    return proba / (6 ** nbDice) * 100

def nb_occurence(tab, nb):
    occurence = 0
    i = 0
    while (i != 5):
        if (tab[i] == nb):
            occurence += 1
        i += 1
    return (occurence)

# def find_a_straight(tab, nb):
#     straight = int(nb)
#     check = 0
#     i = 0
#     j = 0
#     while (j != 5):
#         i = 0
#         while (i != 5):
#             print("STRAIGHT = %i" % (straight))
#             if (int(tab[i]) == straight):
#                 check = 1
#             i += 1
#         if (check == 1):
#             straight -= 1
#             check = 0
#         j += 1
#     return (straight)


def find_a_straight(tab, nb):
    two = 0
    three = 0
    four = 0
    five = 0
    other = 0
    i = 0

    while (i != 5):
        if (tab[i] == "2"):
            two = 1
        if (tab[i] == "3"):
            three = 1
        if (tab[i] == "4"):
            four = 1
        if (tab[i] == "5"):
            five = 1
        if (tab[i] == "6" and nb == "6"):
            other = 1
        if (tab[i] == "1" and nb == "5"):
            other = 1
        i += 1
    
    return (5 - (two + three + four + five + other))





def yams(tab, l):
    yams = probability(5 - nb_occurence(tab, l[1]), 5 - nb_occurence(tab, l[1]))
    print("chances to get a %s yams: %.2f%%" % (l[1], yams))

def four(tab, l):
    if(nb_occurence(tab, l[1]) >= 4):
        print("chances to get a %s four-of-a-kind: 100.00%%" % (l[1]))
    else:
        four = probability(5 - nb_occurence(tab, l[1]), 4 - nb_occurence(tab, l[1]))
        print("chances to get a %s four-of-a-kind: %.2f%%" % (l[1], four))

def pair(tab, l):
    if(nb_occurence(tab, l[1]) >= 2):
        print("chances to get a %s pair: 100.00%%" % (l[1]))
    else:
        pair = probability(5 - nb_occurence(tab, l[1]), 2 - nb_occurence(tab, l[1]))
        print("chances to get a %s pair: %.2f%%" % (l[1], pair))

def three(tab, l):
    if(nb_occurence(tab, l[1]) >= 3):
        print("chances to get a %s three-of-a-kind: 100.00%%" % (l[1]))
    else:
        three = probability(5 - nb_occurence(tab, l[1]), 3 - nb_occurence(tab, l[1]))
        print("chances to get a %s three-of-a-kind: %.2f%%" % (l[1], three))

def full(tab, l):
    if(nb_occurence(tab, l[1]) == 3 and nb_occurence(tab, l[2]) == 2):
        print("chances to get a %s full of %s: 100.00%%" % (l[1], l[2]))
    else:
        full = abs((exactly(5, int(l[2])) - exactly(5, int(l[1]))) / (6 ** 5))
        print("chances to get a %s full of %s: %.2f%%" % (l[1], l[2], full))

def straight(tab, l):
    dice_to_roll = find_a_straight(tab, l[1])
    if(find_a_straight(tab, l[1]) == 0):
        print("chances to get a %s straight: 100.00%%" % (l[1]))
    else:
        result = (((exactly(1, 1) * dice_to_roll / (6 ** dice_to_roll) * 100)))
        if (dice_to_roll > 1):
            result *= dice_to_roll - 1;
        print("chances to get a %s straight: %.2f%%" % (l[1], result))


def check_hand(hand):
    i = len(hand)

    if (hand[i - 1] < '0' or hand[i - 1] > '9'):
        return 1
    l = hand.split("_")
    size = len(l)

    if (size > 2):
        if (l[0] != "full"):
            return 1
    if (size > 3 or size == 1):
        return 1

    if (int(l[1]) < 1 or int(l[1]) > 6): 
        return 1
    if (size == 3):
        if (int(l[2]) < 1 or int(l[2]) > 6): 
            return 1

    if (l[0] == "full" and size != 3):
        return 1
    if (l[0] == "full" and l[1] == l[2]):
        return 1
    if (l[0] == "straight"):
        if (l[1] != "5" and l[1] != "6"):
            return 1
    return 0

def manage(tab, hand):
    l = hand.split("_")

    if (hand == "-h"):
        print_usage()
        return 0
    if (check_hand(hand) == 1):
        return 84
    if (l[0] == "yams"):
        yams(tab, l)
    elif (l[0] == "four"):
        four(tab, l)
    elif (l[0] == "straight"):
        straight(tab, l)
    elif (l[0] == "full"):
        full(tab, l)
    elif (l[0] == "three"):
        three(tab, l)
    elif (l[0] == "pair"):
        pair(tab, l)
    else:
        return 84
    return 0

def check_tab(tab):
    i = 0

    while (i != 5):
        if (len(tab[i]) != 1):
            return 1
        if int(tab[i]) < 0 or int(tab[i]) > 6:
            return 1
        i += 1
    return 0

def main():
    tab = [0] * 5
    i = 1
    
    if (len(sys.argv) == 1):
        exit(84)
    elif (len(sys.argv) == 2):
        exit (manage(tab, sys.argv[1]))
    else:
        if (len(sys.argv) != 7):
            exit(84)
        while i != 6 :
            if (sys.argv[i] < "0" or sys.argv[i] > "6"):
                exit(84)
            tab.insert(0, sys.argv[i])
            tab.remove(tab[i])
            i += 1
        if check_tab(tab) == 1:
            exit(84)
        exit(manage(tab, sys.argv[6]))
    return 0
    


if __name__ == "__main__":
    main()












# def full():
#     print(((exactly(5, 3) - exactly(5, 2)) / (6 ** 5)) * -1)